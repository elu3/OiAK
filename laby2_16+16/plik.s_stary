.data
STDIN = 0
STDOUT = 1
SYSWRITE = 1
SYSREAD = 0
SYSEXIT = 60
EXIT_SUCCESS = 0
BUFLEN = 1024
.bss
.comm textin, 1024
.comm textin2,1024
.comm textw1,1024
.comm textw2,1024
.comm textout, 1024
.comm textout2,1024
.text
.globl _start
_start:
movq $SYSREAD, %rax
movq $STDIN, %rdi
movq $textin, %rsi
movq $BUFLEN, %rdx
syscall

movq %rax,%rcx # dlugosc text1
movq %rdx,%rbx


movq $SYSREAD, %rax
movq $STDIN, %rdi
movq $textin2, %rsi
movq $BUFLEN, %rdx
syscall

xor %r11,%r11
wpisz_zera:
movb $0, textw1(,%r11,1)
movb  $0, textw2(,%r11,1)
inc %r11
cmp 1024,%r11
jl wpisz_zera


dec %rax
dec %rcx
xor %r8,%r8
xor %r9, %r9
xor %r10,%r10
xor %r11, %r11

okreslenie_dlugosci:
movq %rcx, %r8
movq %rax,%r9
cmp  %r9,%r8 # rcx-pierwszy 
je rowna_dlugosc
jl drugi_dluzszy #B<A
jmp pierwszy_dluzszy

pierwszy_dluzszy:
dec %r8
inc %r10
jmp okreslenie_dlugosci


drugi_dluzszy:
dec %r9
inc %r10
jmp okreslenie_dlugosci

rowna_dlugosc:



movq $SYSWRITE, %rax
movq $STDOUT, %rdi
movq $textin, %rsi
movq $BUFLEN, %rdx
syscall

xor %rdx,%rdx
xor %rax,%rax
movq %rcx, %rax
movq %rbx,%rdx


movq $SYSWRITE, %rax
movq $STDOUT, %rdi
movq $textin2, %rsi
movq $BUFLEN, %rdx
syscall


movq $SYSEXIT, %rax
movq $EXIT_SUCCESS, %rdi
syscall